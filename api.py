from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import requests
import json
import os
from datetime import datetime
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
# –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
app = Flask(__name__, template_folder='.')

# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
CORS(app)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud ===
YANDEX_CLOUD_API_KEY = os.getenv('YANDEX_CLOUD_API_KEY', 'your-api-key-here')
YANDEX_CLOUD_FOLDER_ID = os.getenv('YANDEX_CLOUD_FOLDER_ID', 'your-folder-id-here')
YANDEX_CLOUD_MODEL_ID = os.getenv('YANDEX_CLOUD_MODEL_ID', 'yandexgpt')

# üîß –í–ê–ñ–ù–û: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ URL!
YANDEX_AI_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# === –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –º–æ–¥–µ–ª–∏ ===
RESTAURANT_CONTEXT = """
–¢—ã - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —è–ø–æ–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏ "Sakura Sushi" –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ.

–û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å—É—à–∏, —Ä–æ–ª–ª—ã, —è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è
- –ê–¥—Ä–µ—Å: –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, —É–ª. –°–≤–µ—Ç–ª–∞–Ω—Å–∫–∞—è, 42
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (423) 200-12-34
- –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–í—Å: 10:00 - 23:00
- –î–æ—Å—Ç–∞–≤–∫–∞: 45 –º–∏–Ω—É—Ç –≤ –±—É–¥–Ω–∏, 60 –º–∏–Ω—É—Ç –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: 900 ‚ÇΩ
- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1500 ‚ÇΩ

–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞:
- –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è (490 ‚ÇΩ) - –ª–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü
- –°–µ—Ç –°–∞–º—É—Ä–∞–π (1390 ‚ÇΩ) - 30 —à—Ç.: –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è, –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –¢–µ–º–ø—É—Ä–∞, –ß–∏–∑ —Ä–æ–ª–ª
- –†–∞–º–µ–Ω (450 ‚ÇΩ) - –∫—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω, –ª–∞–ø—à–∞, —è–π—Ü–æ, –Ω–æ—Ä–∏, —Å–≤–∏–Ω–∏–Ω–∞ –ß–∞—à—É
- –ú–∏—Å–æ —Å—É–ø (190 ‚ÇΩ) - —Ç–æ—Ñ—É, –≤–∞–∫–∞–º–µ, –∑–µ–ª–µ–Ω—ã–π –ª—É–∫, –±—É–ª—å–æ–Ω –º–∏—Å–æ
- –°–∞—à–∏–º–∏ (560 ‚ÇΩ) - —Å–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü –∏ –æ–∫—É–Ω—å
- –¢–µ–º–ø—É—Ä–∞ —Ä–æ–ª–ª (520 ‚ÇΩ) - —Ä–æ–ª–ª —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π –≤ —Ö—Ä—É—Å—Ç—è—â–µ–π –ø–∞–Ω–∏—Ä–æ–≤–∫–µ
- –†–æ–ª–ª –î—Ä–∞–∫–æ–Ω (620 ‚ÇΩ) - —É–≥–æ—Ä—å, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü, —Å–æ—É—Å —É–Ω–∞–≥–∏

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤—ã–±–æ—Ä–æ–º –±–ª—é–¥
2. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–∞–≤–µ, —Ü–µ–Ω–µ, –¥–æ—Å—Ç–∞–≤–∫–µ
3. –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã (—Å–æ–±–∏—Ä–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å)
4. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ–± –∞–∫—Ü–∏—è—Ö –∏ –Ω–æ–≤–∏–Ω–∫–∞—Ö
5. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å, –ø–æ–ø—Ä–æ—Å–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å.
"""

def call_yandex_ai(user_message, conversation_history=None):
    """–í—ã–∑–æ–≤ AI –º–æ–¥–µ–ª–∏ Yandex Cloud"""
    try:
        headers = {
            'Authorization': f'Api-Key {YANDEX_CLOUD_API_KEY}',
            'Content-Type': 'application/json'
        }

        system_prompt = RESTAURANT_CONTEXT

        if conversation_history:
            history_text = "\n".join([
                f"–ö–ª–∏–µ–Ω—Ç: {msg['user']}\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {msg['bot']}"
                for msg in conversation_history[-5:]
            ])
            system_prompt += f"\n\n–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{history_text}"

        system_prompt += f"\n\n–ö–ª–∏–µ–Ω—Ç: {user_message}\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:"

        data = {
            "modelUri": f"gpt://{YANDEX_CLOUD_FOLDER_ID}/{YANDEX_CLOUD_MODEL_ID}",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 500
            },
            "messages": [
                {
                    "role": "system",
                    "text": system_prompt
                }
            ]
        }

        response = requests.post(YANDEX_AI_URL, headers=headers, json=data, timeout=30)

        if response.status_code == 200:
            result = response.json()
            return result['result']['alternatives'][0]['message']['text'].strip()
        else:
            logger.error(f"Yandex AI API error: {response.status_code} - {response.text}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        logger.error(f"Error calling Yandex AI: {str(e)}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –æ—Ç–¥–∞–µ–º HTML –∏–∑ –∫–æ—Ä–Ω—è"""
    try:
        return render_template('lend_version1.html')
    except Exception as e:
        logger.error(f"Template not found: {e}")
        return f"<h1 style='color:red'>–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω lend_version1.html</h1><p>{str(e)}</p>", 500


@app.route('/api/chat', methods=['POST'])
def chat():
    """API endpoint –¥–ª—è —á–∞—Ç–∞ —Å AI"""
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        conversation_history = data.get('history', [])

        if not user_message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        ai_response = call_yandex_ai(user_message, conversation_history)
        logger.info(f"User: {user_message} ‚Üí AI: {ai_response}")

        return jsonify({
            'response': ai_response,
            'timestamp': datetime.now().isoformat()
        })

    except Exception as e:
        logger.error(f"Chat API error: {str(e)}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.route('/api/order', methods=['POST'])
def create_order():
    """API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        data = request.get_json()

        required_fields = ['name', 'phone', 'address', 'items']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({'error': f'–ü–æ–ª–µ "{field}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400

        order_id = f"ORDER_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        order_data = {
            'id': order_id,
            'customer': {
                'name': data['name'],
                'phone': data['phone'],
                'email': data.get('email', ''),
                'address': data['address']
            },
            'items': data['items'],
            'total': data.get('total', 0),
            'delivery_time': data.get('delivery_time', 'asap'),
            'payment_method': data.get('payment_method', 'cash'),
            'comment': data.get('comment', ''),
            'status': 'new',
            'created_at': datetime.now().isoformat()
        }

        logger.info(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order_id}")
        return jsonify({
            'success': True,
            'order_id': order_id,
            'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!'
        })

    except Exception as e:
        logger.error(f"Order API error: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'}), 500


@app.route('/api/menu', methods=['GET'])
def get_menu():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é"""
    menu_items = [
        {
            'id': 1,
            'name': '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è',
            'description': '–õ–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü. 8 —à—Ç., 250 –≥.',
            'price': 490,
            'category': 'rolls',
            'image': 'https://avatars.mds.yandex.net/i?id=8576130dcdd13973095d8c75482182f6e93a19df-4854935-images-thumbs&n=13'
        },
        {
            'id': 2,
            'name': '–°–µ—Ç –°–∞–º—É—Ä–∞–π',
            'description': '30 —à—Ç.: –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è, –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –¢–µ–º–ø—É—Ä–∞, –ß–∏–∑ —Ä–æ–ª–ª. 950 –≥.',
            'price': 1390,
            'category': 'rolls',
            'image': 'https://mir-s3-cdn-cf.behance.net/project_modules/max_3840/7431b582203759.5d1607ad5a3c2.jpg'
        },
        {
            'id': 3,
            'name': '–†–∞–º–µ–Ω',
            'description': '–ö—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω, –ª–∞–ø—à–∞, —è–π—Ü–æ, –Ω–æ—Ä–∏, —Å–≤–∏–Ω–∏–Ω–∞ –ß–∞—à—É. 400 –≥.',
            'price': 450,
            'category': 'noodles',
            'image': 'https://avatars.mds.yandex.net/i?id=b6eec287b79f84376c9500a1f5c064f76b435b24-10779221-images-thumbs&n=13'
        },
        {
            'id': 4,
            'name': '–ú–∏—Å–æ —Å—É–ø',
            'description': '–¢–æ—Ñ—É, –≤–∞–∫–∞–º–µ, –∑–µ–ª–µ–Ω—ã–π –ª—É–∫, –±—É–ª—å–æ–Ω –º–∏—Å–æ. 250 –º–ª.',
            'price': 190,
            'category': 'soups',
            'image': 'https://avatars.mds.yandex.net/i?id=4e7cfdd02e83ebb1b54d9a6c7dfb98c3299dc9e9-16447530-images-thumbs&n=13'
        },
        {
            'id': 5,
            'name': '–°–∞—à–∏–º–∏',
            'description': '–°–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü –∏ –æ–∫—É–Ω—å. 150 –≥.',
            'price': 560,
            'category': 'sashimi',
            'image': 'https://avatars.mds.yandex.net/i?id=cd6f8c1e01fbca2cc24618523660d7de2baa4230-4393404-images-thumbs&n=13'
        }
    ]
    return jsonify({'menu': menu_items})


@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'yandex_ai_configured': bool(YANDEX_CLOUD_API_KEY and YANDEX_CLOUD_FOLDER_ID),
        'version': '1.0'
    })


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è Render / VK Cloud) ===
if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)

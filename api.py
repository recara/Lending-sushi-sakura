from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import requests
import os
from datetime import datetime
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__, template_folder='.')
CORS(app)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud ===
YANDEX_CLOUD_FOLDER_ID = os.getenv('YANDEX_CLOUD_FOLDER_ID', 'b1ga94okgf6e5d8edu0u')
IAM_TOKEN = os.getenv('IAM_TOKEN')  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IAM-—Ç–æ–∫–µ–Ω
API_KEY = os.getenv('YANDEX_API_KEY')  # –ò–ª–∏ API-–∫–ª—é—á

# URL –¥–ª—è Yandex GPT
YANDEX_AI_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ú–æ–¥–µ–ª—å: yandexgpt-lite/latest
MODEL_URI = f"gpt://{YANDEX_CLOUD_FOLDER_ID}/yandexgpt-lite/latest"

# –ö–æ–Ω—Ç–µ–∫—Å—Ç AI
RESTAURANT_CONTEXT = """
–¢—ã - AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —è–ø–æ–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏ "Sakura Sushi" –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–º–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞–º —Å –≤—ã–±–æ—Ä–æ–º –±–ª—é–¥, —Ü–µ–Ω–æ–π, –¥–æ—Å—Ç–∞–≤–∫–æ–π.
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å.
"""

def call_yandex_ai(user_message, conversation_history=None):
    """–í—ã–∑–æ–≤ YandexGPT —á–µ—Ä–µ–∑ requests"""
    try:
        if not IAM_TOKEN and not API_KEY:
            logger.error("IAM_TOKEN –∏ YANDEX_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")
            return "AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if IAM_TOKEN:
            auth_header = f'Bearer {IAM_TOKEN}'
        else:
            auth_header = f'Api-Key {API_KEY}'

        headers = {
            'Authorization': auth_header,
            'Content-Type': 'application/json',
            'x-folder-id': YANDEX_CLOUD_FOLDER_ID
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = RESTAURANT_CONTEXT

        if conversation_history:
            history_text = "\n".join([
                f"–ö–ª–∏–µ–Ω—Ç: {msg['user']}\n–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {msg['bot']}"
                for msg in conversation_history[-5:]
            ])
            system_prompt += f"\n\n–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{history_text}"

        messages = [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": user_message}
        ]

        data = {
            "modelUri": MODEL_URI,
            "completionOptions": {
                "temperature": 0.7,
                "maxTokens": 500
            },
            "messages": messages
        }

        response = requests.post(YANDEX_AI_URL, headers=headers, json=data, timeout=30)

        if response.status_code == 200:
            result = response.json()
            return result['result']['alternatives'][0]['message']['text'].strip()
        else:
            logger.error(f"Yandex AI error {response.status_code}: {response.text}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    except Exception as e:
        logger.error(f"Error calling Yandex AI: {str(e)}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI."


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –æ—Ç–¥–∞–µ–º HTML –∏–∑ –∫–æ—Ä–Ω—è"""
    try:
        return render_template('lend_version1.html')
    except Exception as e:
        logger.error(f"Template not found: {e}")
        return "<h1 style='color:red'>–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω lend_version1.html</h1>", 500


@app.route('/api/chat', methods=['POST'])
def chat():
    """API endpoint –¥–ª—è —á–∞—Ç–∞ —Å AI"""
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        conversation_history = data.get('history', [])

        if not user_message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        ai_response = call_yandex_ai(user_message, conversation_history)
        return jsonify({
            'response': ai_response,
            'timestamp': datetime.now().isoformat()
        })

    except Exception as e:
        logger.error(f"Chat API error: {str(e)}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.route('/api/menu', methods=['GET'])
def get_menu():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é"""
    menu_items = [
        {
            'id': 1,
            'name': '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è',
            'description': '–õ–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü. 8 —à—Ç., 250 –≥.',
            'price': 490,
            'category': 'rolls',
            'image': 'https://avatars.mds.yandex.net/i?id=8576130dcdd13973095d8c75482182f6e93a19df-4854935-images-thumbs&n=13'
        },
        {
            'id': 2,
            'name': '–°–µ—Ç –°–∞–º—É—Ä–∞–π',
            'description': '30 —à—Ç.: –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è, –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –¢–µ–º–ø—É—Ä–∞, –ß–∏–∑ —Ä–æ–ª–ª. 950 –≥.',
            'price': 1390,
            'category': 'rolls',
            'image': 'https://mir-s3-cdn-cf.behance.net/project_modules/max_3840/7431b582203759.5d1607ad5a3c2.jpg'
        },
        {
            'id': 3,
            'name': '–†–∞–º–µ–Ω',
            'description': '–ö—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω, –ª–∞–ø—à–∞, —è–π—Ü–æ, –Ω–æ—Ä–∏, —Å–≤–∏–Ω–∏–Ω–∞ –ß–∞—à—É. 400 –≥.',
            'price': 450,
            'category': 'noodles',
            'image': 'https://avatars.mds.yandex.net/i?id=b6eec287b79f84376c9500a1f5c064f76b435b24-10779221-images-thumbs&n=13'
        },
        {
            'id': 4,
            'name': '–ú–∏—Å–æ —Å—É–ø',
            'description': '–¢–æ—Ñ—É, –≤–∞–∫–∞–º–µ, –∑–µ–ª–µ–Ω—ã–π –ª—É–∫, –±—É–ª—å–æ–Ω –º–∏—Å–æ. 250 –º–ª.',
            'price': 190,
            'category': 'soups',
            'image': 'https://avatars.mds.yandex.net/i?id=4e7cfdd02e83ebb1b54d9a6c7dfb98c3299dc9e9-16447530-images-thumbs&n=13'
        },
        {
            'id': 5,
            'name': '–°–∞—à–∏–º–∏',
            'description': '–°–≤–µ–∂–∏–π –ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü –∏ –æ–∫—É–Ω—å. 150 –≥.',
            'price': 560,
            'category': 'sashimi',
            'image': 'https://avatars.mds.yandex.net/i?id=cd6f8c1e01fbca2cc24618523660d7de2baa4230-4393404-images-thumbs&n=13'
        }
    ]
    return jsonify({'menu': menu_items})


@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'ai_ready': bool(IAM_TOKEN or API_KEY),
        'version': '1.0'
    })


# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)
